#!/bin/bash

# Colors for text
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
YELLOW='\033[0;33m'
NC='\033[0m'     # No Color
BOLD='\033[1m'   # Bold text
HEAD_COLOR='\033[1;37m'  # Bold white for header

# --- Configuration ---
# Name of your compiled C++ program
PROGRAM_NAME="./program"
CPP_SOURCE_FILE=""

# Find the C++ source file
for file in *.cpp; do
  if [ -f "$file" ]; then
    CPP_SOURCE_FILE="$file"
    break
  fi
done

if [ -z "$CPP_SOURCE_FILE" ]; then
  echo -e "${RED}Error: No C++ source file found in current directory${NC}"
  echo -e "${YELLOW}Please place your C++ file (with .cpp extension) in this directory${NC}"
  exit 1
fi

# --- Compilation ---
echo -e "${CYAN}Compiling $CPP_SOURCE_FILE...${NC}"
g++ -std=c++11 -o program "$CPP_SOURCE_FILE" 2> compile_errors.txt

if [ $? -ne 0 ]; then
  echo -e "${RED}Compilation failed! See errors below:${NC}"
  cat compile_errors.txt
  rm compile_errors.txt
  exit 1
else
  echo -e "${GREEN}Compilation successful!${NC}"
  rm compile_errors.txt
fi

# --- File Checks ---
echo -e "${CYAN}Checking test files...${NC}"

if [ ! -f "input.txt" ]; then
  echo -e "${RED}Error: input.txt not found${NC}"
  exit 1
fi

if [ ! -f "output.txt" ]; then
  echo -e "${RED}Error: output.txt not found${NC}"
  exit 1
fi

if [ ! -f "$PROGRAM_NAME" ]; then
  echo -e "${RED}Error: Program '$PROGRAM_NAME' not found${NC}"
  echo -e "${YELLOW}Compilation may have failed without error message${NC}"
  exit 1
fi

if [ ! -x "$PROGRAM_NAME" ]; then
  echo -e "${YELLOW}Making program executable...${NC}"
  chmod +x "$PROGRAM_NAME"
fi

# --- Read Test Cases ---
readarray -t input_lines < input.txt
readarray -t expected_lines < output.txt

# Remove test count line if present
if [[ "${input_lines[0]}" =~ ^[0-9]+$ ]]; then
  num_test_cases="${input_lines[0]}"
  input_lines=("${input_lines[@]:1}")
  echo -e "${CYAN}Found test case count: $num_test_cases${NC}"
fi

# --- Run Tests ---
num_tests=${#input_lines[@]}
actual_lines=()

echo -e "${CYAN}Running $num_tests test cases...${NC}"

for ((i=0; i<num_tests; i++)); do
  input="${input_lines[$i]}"
  # Create a temporary file for the output
  temp_file=$(mktemp)
  
  # Run the program with the input
  echo "$input" | "$PROGRAM_NAME" > "$temp_file" 2>/dev/null
  
  # Read the output
  output=$(cat "$temp_file")
  rm "$temp_file"
  
  # If output is empty, replace with placeholder
  if [ -z "$output" ]; then
    output="[NO OUTPUT]"
  fi
  
  actual_lines+=("$output")
done

# --- Table Layout ---
MIN_CASE_WIDTH=10
MIN_TEST_WIDTH=20
MIN_ANSWER_WIDTH=20
MIN_EXPECTED_WIDTH=20

# Calculate column widths
case_width=$MIN_CASE_WIDTH
test_width=$MIN_TEST_WIDTH
answer_width=$MIN_ANSWER_WIDTH
expected_width=$MIN_EXPECTED_WIDTH

for ((i=0; i<num_tests; i++)); do
  case_text="Case $((i+1))"
  test_text="${input_lines[$i]}"
  answer_text="${actual_lines[$i]}"
  expected_text="${expected_lines[$i]}"
  
  if [ ${#case_text} -gt $case_width ]; then case_width=${#case_text}; fi
  if [ ${#test_text} -gt $test_width ]; then test_width=${#test_text}; fi
  if [ ${#answer_text} -gt $answer_width ]; then answer_width=${#answer_text}; fi
  if [ ${#expected_text} -gt $expected_width ]; then expected_width=${#expected_text}; fi
done

# Add padding
case_width=$((case_width + 2))
test_width=$((test_width + 2))
answer_width=$((answer_width + 2))
expected_width=$((expected_width + 2))

# --- Print Table Functions ---
print_separator() {
  printf "+"
  printf "%0.s-" $(seq 1 $case_width)
  printf "+"
  printf "%0.s-" $(seq 1 $test_width)
  printf "+"
  printf "%0.s-" $(seq 1 $answer_width)
  printf "+"
  printf "%0.s-" $(seq 1 $expected_width)
  printf "+\n"
}

print_header() {
  printf "${BOLD}${HEAD_COLOR}|"
  printf " %-$((case_width-1))s|" "Case #"
  printf " %-$((test_width-1))s|" "Test Case"
  printf " %-$((answer_width-1))s|" "Your Answer"
  printf " %-$((expected_width-1))s|" "Expected Answer"
  printf "${NC}\n"
}

print_row() {
  local case=$1
  local test=$2
  local answer=$3
  local expected=$4
  local correct=$5
  
  # Truncate long values
  if [ ${#test} -gt $((test_width-4)) ]; then
    test="${test:0:$((test_width-6))}..."
  fi
  
  if [ ${#answer} -gt $((answer_width-4)) ]; then
    answer="${answer:0:$((answer_width-6))}..."
  fi
  
  if [ ${#expected} -gt $((expected_width-4)) ]; then
    expected="${expected:0:$((expected_width-6))}..."
  fi
  
  # Color based on correctness
  if [ "$correct" = "true" ]; then
    printf "${BOLD}${GREEN}|"
  else
    printf "${BOLD}${RED}|"
  fi
  
  printf " %-$((case_width-1))s|" "$case"
  printf " %-$((test_width-1))s|" "$test"
  printf " %-$((answer_width-1))s|" "$answer"
  printf " %-$((expected_width-1))s|" "$expected"
  printf "${NC}\n"
}

# --- Display Results ---
echo -e "${BOLD}${CYAN} Test Results ${NC}"
print_separator
print_header
print_separator

correct_count=0

for ((i=0; i<num_tests; i++)); do
  case_text="Case $((i+1))"
  test_text="${input_lines[$i]}"
  answer_text="${actual_lines[$i]}"
  expected_text="${expected_lines[$i]}"
  
  # Trim whitespace for comparison
  trimmed_answer=$(echo "$answer_text" | tr -d '[:space:]' | grep -v "NO OUTPUT")
  trimmed_expected=$(echo "$expected_text" | tr -d '[:space:]')
  
  correct="false"
  if [ "$trimmed_answer" = "$trimmed_expected" ] && [ ! -z "$trimmed_answer" ]; then
    correct="true"
    ((correct_count++))
  fi
  
  print_row "$case_text" "$test_text" "$answer_text" "$expected_text" "$correct"
  print_separator
done

# --- Summary ---
echo -e "${BOLD}Summary: ${correct_count}/${num_tests} test cases passed.${NC}"

# --- Debug Info ---
if [ $correct_count -lt $num_tests ]; then
  echo -e "\n${YELLOW}Debugging Tips:${NC}"
  echo -e "1. Check if your program reads input correctly (using 'cin' or similar)"
  echo -e "2. Make sure output format matches exactly what's expected"
  echo -e "3. Run a single test manually: ${BOLD}echo \"${input_lines[0]}\" | $PROGRAM_NAME${NC}"
  echo -e "4. Compare your output with expected: ${BOLD}\"${expected_lines[0]}\"${NC}"
  
  # Show first failing test case
  for ((i=0; i<num_tests; i++)); do
    trimmed_answer=$(echo "${actual_lines[$i]}" | tr -d '[:space:]' | grep -v "NO OUTPUT")
    trimmed_expected=$(echo "${expected_lines[$i]}" | tr -d '[:space:]')
    
    if [ "$trimmed_answer" != "$trimmed_expected" ] || [ -z "$trimmed_answer" ]; then
      echo -e "\n${YELLOW}First failing test case (Case $((i+1))):${NC}"
      echo -e "Input: ${BOLD}${input_lines[$i]}${NC}"
      echo -e "Your output: ${BOLD}${actual_lines[$i]}${NC}"
      echo -e "Expected: ${BOLD}${expected_lines[$i]}${NC}"
      break
    fi
  done
fi